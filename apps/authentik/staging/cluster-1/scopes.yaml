---
apiVersion: propertymapping.authentik.crossplane.io/v1alpha1
kind: ProviderScope
metadata:
  name: openid-email
  labels:
    velero.io/include: "true"
  annotations:
    crossplane.io/external-name: f3c16977-d530-4ede-8513-554c4d2d24f8
spec:
  providerConfigRef:
    name: authentik-provider
  forProvider:
    expression: |
      return {
        "email": request.user.email,
        "email_verified": True
      }
    name: openid email address
    scopeName: email

---
apiVersion: propertymapping.authentik.crossplane.io/v1alpha1
kind: ProviderScope
metadata:
  name: openid-openid
  labels:
    velero.io/include: "true"
  annotations:
    crossplane.io/external-name: 82d8725b-fb0c-4847-a951-f4d5b092a6f1
spec:
  providerConfigRef:
    name: authentik-provider
  forProvider:
    expression: |
      # This scope is required by the OpenID-spec, and must as such exist in authentik.
      # The scope by itself does not grant any information
      return {}
    name: openid openid
    scopeName: openid

---
apiVersion: propertymapping.authentik.crossplane.io/v1alpha1
kind: ProviderScope
metadata:
  name: openid-profile
  labels:
    velero.io/include: "true"
  annotations:
    crossplane.io/external-name: 624a5550-0202-4afa-99ea-a1ae2048e665
spec:
  providerConfigRef:
    name: authentik-provider
  forProvider:
    expression: |
      return {
        # Because authentik only saves the user's full name, and has no concept of first and last names,
        # the full name is used as given name.
        # You can override this behaviour in custom mappings, i.e. `request.user.name.split(" ")`
        "name": request.user.name,
        "given_name": request.user.name,
        "preferred_username": request.user.username,
        "nickname": request.user.username,
        "groups": [group.name for group in request.user.ak_groups.all()],
      }
    name: openid profile
    scopeName: profile

