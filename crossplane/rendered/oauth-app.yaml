apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: oauths.applications.authentik.crossplane.io
spec:
  claimNames:
    kind: OAuthClaim
    plural: oauthclaims
  defaultCompositeDeletePolicy: Foreground
  defaultCompositionUpdatePolicy: Automatic
  group: applications.authentik.crossplane.io
  names:
    kind: OAuth
    plural: oauths
  versions:
  - name: v1alpha1
    referenceable: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              externalHost:
                type: string
              icon:
                type: string
              description:
                type: string
              publisher:
                type: string
              redirectURL:
                type: string
              adminBinding:
                type: boolean
                default: false
            required:
            - externalHost
            - redirectURL
    served: true
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: oauth-application
spec:
  compositeTypeRef:
    apiVersion: applications.authentik.crossplane.io/v1alpha1
    kind: OAuth
  mode: Pipeline
  pipeline:
  - functionRef:
      name: crossplane-contrib-function-extra-resources
    input:
      apiVersion: extra-resources.fn.crossplane.io/v1beta1
      kind: Input
      spec:
        extraResources:
        - apiVersion: directory.authentik.crossplane.io/v1alpha1
          kind: Group
          into: adminGroup
          type: Reference
          ref:
            name: cluster-admins
    step: pull-group
  - functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      spec:
        source: |
          import crossplane_authentik.provider.v1alpha1 as provider
          import crossplane_authentik.policy.v1alpha1 as policy
          import crossplane_authentik.v1alpha1 as authentik

          # Read the XR
          oxr = option("params").oxr
          ocds = option("params").ocds

          _providerId = ocds[oxr.metadata.name + "-provider"]?.Resource?.status?.atProvider?.id
          _appId = ocds[oxr.metadata.name + "-application"]?.Resource?.status?.atProvider?.uuid
          _groupId = option("params").ctx["apiextensions.crossplane.io/extra-resources"]?.adminGroup[0]?.status?.atProvider?.id

          _claimName = oxr?.metadata?.labels?["crossplane.io/claim-name"]
          _namespace = oxr?.metadata?.labels?["crossplane.io/claim-namespace"]

          oauth: provider.OAuth2 = {
              metadata.name = oxr.metadata.name + "-provider"
              spec = {
                  writeConnectionSecretToRef.name = _claimName + "-client-secret"
                  writeConnectionSecretToRef.name = _namespace
                  forProvider = {
                      name = oxr.metadata.name
                      clientId = _claimName
                      authorizationFlowRef.name = "default-provider-authorization-implicit-consent"
                      invalidationFlowRef.name =  "default-provider-invalidation-flow"
                      propertyMappingsRefs = [
                          { name = "openid-email" }
                          { name = "openid-openid" }
                          { name = "openid-profile" }
                      ]
                      allowedRedirectUris = [
                          {
                             "matching_mode" = "strict"
                             "url" = "https://" + oxr.spec.externalHost + "/" + oxr.spec.redirectURL
                          }
                      ]

                  }
                  providerConfigRef = {
                      name = "authentik-provider"
                  }
              }
          }

          application: authentik.Application = {
              metadata.name = oxr.metadata.name + "-application"
              spec = {
                  forProvider = {
                      name = oxr.metadata.name
                      if _providerId:
                          protocolProvider = int(_providerId)
                      metaIcon = oxr.spec.icon
                      metaDescription = oxr.spec.description
                      metaLaunchUrl = "https://" + oxr.spec.externalHost
                      metaPublisher = oxr.spec.publisher
                  }
                  providerConfigRef = {
                      name = "authentik-provider"
                  }
              }
          }

          binding: policy.Binding {
              metadata.name = oxr.metadata.name + "-binding"
              spec.providerConfigRef.name = "authentik-provider"
              spec.forProvider = {
                  target = _appId
                  group = _groupId
                  enabled = True
                  order: 0
              }
          }

          _adminBinding = oxr.spec.adminBinding

          items = [
              oauth,
              application,
              if _adminBinding:
                  binding
          ]
        dependencies: crossplane_authentik = { oci = "oci://ghcr.io/felixz92/crossplane-provider-authentik/crossplane-authetik", tag = "0.3.0", version = "0.3.0" }
    step: provider
  - functionRef:
      name: crossplane-contrib-function-auto-ready
    step: automatically-detect-ready-composed-resources
