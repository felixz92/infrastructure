kind: Composition
apiVersion: apiextensions.crossplane.io/v1
metadata:
  name: forward-auth-application
spec:
  compositeTypeRef:
    apiVersion: applications.authentik.crossplane.io/v1alpha1
    kind: ForwardAuth
  mode: Pipeline
  pipeline:
    - step: create-provider
      functionRef:
        name: crossplane-contrib-function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          - name: provider
            readinessChecks:
              - type: NonEmpty
                fieldPath: status.atProvider.id
            base:
              apiVersion: provider.authentik.crossplane.io/v1alpha1
              kind: Proxy
              spec:
                forProvider:
                  mode: forward_single
                  accessTokenValidity: "hours=24"
                  authorizationFlowRef:
                    name: default-provider-authorization-implicit-consent
                  invalidationFlowRef:
                    name: default-provider-invalidation-flow
                providerConfigRef:
                  name: authentik-provider
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "metadata.name"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.name"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.externalHost"
                toFieldPath: "spec.forProvider.externalHost"
                transforms:
                  - type: string
                    string:
                      type: Format
                      fmt: "https://%s"
              - type: ToCompositeFieldPath
                fromFieldPath: "status.atProvider.id"
                toFieldPath: "status.atProvider.providerId"
                transforms:
                  - type: convert
                    convert:
                      toType: int

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready
    - step: create-application
      functionRef:
        name: crossplane-contrib-function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          - name: application
            base:
              kind: Application
              apiVersion: authentik.crossplane.io/v1alpha1
              spec:
                providerConfigRef:
                  name: authentik-provider
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "metadata.name"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.name"
              - type: FromCompositeFieldPath
                fromFieldPath: "status.atProvider.providerId"
                toFieldPath: "spec.forProvider.protocolProvider"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.icon"
                toFieldPath: "spec.forProvider.metaIcon"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.description"
                toFieldPath: "spec.forProvider.metaDescription"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.externalHost"
                toFieldPath: "spec.forProvider.metaLaunchUrl"
                transforms:
                  - type: string
                    string:
                      type: Format
                      fmt: "https://%s"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.publisher"
                toFieldPath: "spec.forProvider.metaPublisher"
    - step: create-outpost
      functionRef:
        name: crossplane-contrib-function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          - name: outpost
            base:
              apiVersion: authentik.crossplane.io/v1alpha1
              kind: Outpost
              spec:
                providerConfigRef:
                  name: authentik-provider
                forProvider:
                  type: proxy
                  serviceConnectionRef:
                    name: local
                  config: |
                    {
                      "authentik_host": "http://authentik-server/",
                      "authentik_host_insecure": true,
                      "authentik_host_browser": "https://authentik.staging-fzx-infra.dev/",
                      "log_level": "info",
                      "object_naming_template": "ak-outpost-%(name)s",
                      "kubernetes_replicas": 1,
                      "kubernetes_namespace": "authentik",
                      "kubernetes_service_type": "ClusterIP",
                      "kubernetes_disabled_components": ["ingress"]
                    }
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "metadata.name"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.name"
              - type: FromCompositeFieldPath
                fromFieldPath: "status.atProvider.providerId"
                toFieldPath: "spec.forProvider.protocolProviders[0]"
              - type: ToCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "status.outpost.name"
    - step: create-ingress
      functionRef:
        name: crossplane-contrib-function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          - name: middleware
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                providerConfigRef:
                  name: kubernetes-provider
                deletionPolicy: Delete
                readiness:
                  policy: SuccessfulCreate
                forProvider:
                  manifest:
                    apiVersion: traefik.io/v1alpha1
                    kind: Middleware
                    spec:
                      forwardAuth:
                        trustForwardHeader: true
                        authResponseHeaders:
                          - X-authentik-username
                          - X-authentik-groups
                          - X-authentik-entitlements
                          - X-authentik-email
                          - X-authentik-name
                          - X-authentik-uid
                          - X-authentik-jwt
                          - X-authentik-meta-jwks
                          - X-authentik-meta-outpost
                          - X-authentik-meta-provider
                          - X-authentik-meta-app
                          - X-authentik-meta-version
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.manifest.metadata.name"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.labels['crossplane.io/claim-namespace']"
                toFieldPath: "spec.forProvider.manifest.metadata.namespace"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.manifest.spec.forwardAuth.address"
                transforms:
                  - type: string
                    string:
                      type: Format
                      fmt: "http://ak-outpost-%s.authentik:9000/outpost.goauthentik.io/auth/traefik"
          - name: cert
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                providerConfigRef:
                  name: kubernetes-provider
                deletionPolicy: Delete
                readiness:
                  policy: AllTrue
                forProvider:
                  manifest:
                    apiVersion: cert-manager.io/v1
                    kind: Certificate
                    spec:
                      issuerRef:
                        name: dns-clusterissuer
                        kind: ClusterIssuer
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.manifest.metadata.name"
                transforms:
                  - type: string
                    string:
                      type: Format
                      fmt: "%s-ingress"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.labels['crossplane.io/claim-namespace']"
                toFieldPath: "spec.forProvider.manifest.metadata.namespace"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.manifest.spec.secretName"
                transforms:
                  - type: string
                    string:
                      type: Format
                      fmt: "%s-ingress"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.externalHost"
                toFieldPath: "spec.forProvider.manifest.spec.dnsNames[0]"
          - name: gateway
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                providerConfigRef:
                  name: kubernetes-provider
                deletionPolicy: Delete
                readiness:
                  policy: AllTrue
                forProvider:
                  manifest:
                    apiVersion: gateway.networking.k8s.io/v1
                    kind: Gateway
                    spec:
                      gatewayClassName: traefik
                      listeners:
                        - name: websecure
                          port: 8443
                          protocol: HTTPS
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.manifest.metadata.name"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.labels['crossplane.io/claim-namespace']"
                toFieldPath: "spec.forProvider.manifest.metadata.namespace"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.externalHost"
                toFieldPath: "spec.forProvider.manifest.spec.listeners[0].hostname"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.manifest.spec.listeners[0].tls.certificateRefs[0].name"
                transforms:
                  - type: string
                    string:
                      type: Format
                      fmt: "%s-ingress"
          - name: route
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                providerConfigRef:
                  name: kubernetes-provider
                deletionPolicy: Delete
                readiness:
                  policy: SuccessfulCreate
                forProvider:
                  manifest:
                    apiVersion: gateway.networking.k8s.io/v1
                    kind: HTTPRoute
                    spec:
                      rules:
                        - matches:
                            - path:
                                type: PathPrefix
                                value: /
                          filters:
                            - type: ExtensionRef
                              extensionRef:
                                group: traefik.io
                                kind: Middleware
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.manifest.metadata.name"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.labels['crossplane.io/claim-namespace']"
                toFieldPath: "spec.forProvider.manifest.metadata.namespace"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.manifest.spec.parentRefs[0].name"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.externalHost"
                toFieldPath: "spec.forProvider.manifest.spec.hostnames[0]"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.backendService.name"
                toFieldPath: "spec.forProvider.manifest.spec.rules[0].backendRefs[0].name"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.backendService.port"
                toFieldPath: "spec.forProvider.manifest.spec.rules[0].backendRefs[0].port"
              - type: FromCompositeFieldPath
                fromFieldPath: "metadata.name"
                toFieldPath: "spec.forProvider.manifest.spec.rules[0].filters[0].extensionRef.name"
