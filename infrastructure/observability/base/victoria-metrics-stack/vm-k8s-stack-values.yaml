victoria-metrics-operator:
  enabled: false

defaultDashboards:
  enabled: true
  grafanaOperator:
    enabled: true
    spec:
      folderRef: kubernetes
      instanceSelector:
        matchLabels:
          dashboards: grafana
      allowCrossNamespaceImport: true
  dashboards:
    victoriametrics-vmalert:
      enabled: true
    victoriametrics-operator:
      enabled: true
    node-exporter-full:
      enabled: true

# -- Create default rules for monitoring the cluster
defaultRules:
  create: true

# Configures vmsingle params
vmsingle:
  enabled: true
  # -- Full spec for VMSingle CRD. Allowed values describe [here](https://docs.victoriametrics.com/operator/api#vmsinglespec)
  spec:
    port: "8429"
    # -- Data retention period. Possible units character: h(ours), d(ays), w(eeks), y(ears), if no unit character specified - month. The minimum retention period is 24h. See these [docs](https://docs.victoriametrics.com/single-server-victoriametrics/#retention)
    retentionPeriod: "4w"
    replicaCount: 1
    extraArgs: {}
    resources:
      requests:
        cpu: 250m
        memory: 1280Mi
      limits:
        memory: 1280Mi
    storage:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi

alertmanager:
  enabled: true
  # -- (object) Full spec for VMAlertmanager CRD. Allowed values described [here](https://docs.victoriametrics.com/operator/api#vmalertmanagerspec)
  spec:
    replicaCount: 1
    port: "9093"
    selectAllByDefault: true
    image:
      tag: v0.27.0
    externalURL: "https://alertmanager.${BASE_DOMAIN}"
    routePrefix: /
    disableNamespaceMatcher: true
    configSelector:
      matchLabels:
        alertmanager-config: global
    resources:
      requests:
        cpu: 10m
        memory: 40Mi
      limits:
        memory: 40Mi
    configReloaderResources:
      requests:
        cpu: 10m
        memory: 10Mi
      limits:
        memory: 10Mi

  config:
    templates:
      - "/etc/vm/configs/**/*.tmpl"
    route:
      # group_by: ["alertgroup", "job"]
      # group_wait: 30s
      # group_interval: 5m
      # repeat_interval: 12h
      receiver: "blackhole"
      ## routes:
        ###################################################
        ## Duplicate code_owner routes to teams
        ## These will send alerts to team channels but continue
        ## processing through the rest of the tree to handled by on-call
        # - matchers:
        #     - code_owner_channel!=""
        #     - severity=~"info|warning|critical"
        #   group_by: ["code_owner_channel", "alertgroup", "job"]
        #   receiver: slack-code-owners
        # ###################################################
        # ## Standard on-call routes
        # - matchers:
        #     - severity=~"info|warning|critical"
        #   receiver: slack-monitoring
        #   continue: true

    # inhibit_rules:
    #   - target_matchers:
    #       - severity=~"warning|info"
    #     source_matchers:
    #       - severity=critical
    #     equal:
    #       - cluster
    #       - namespace
    #       - alertname
    #   - target_matchers:
    #       - severity=info
    #     source_matchers:
    #       - severity=warning
    #     equal:
    #       - cluster
    #       - namespace
    #       - alertname
    #   - target_matchers:
    #       - severity=info
    #     source_matchers:
    #       - alertname=InfoInhibitor
    #     equal:
    #       - cluster
    #       - namespace

    receivers:
      - name: blackhole
      # - name: "slack-monitoring"
      #   slack_configs:
      #     - channel: "#channel"
      #       send_resolved: true
      #       title: '{{ template "slack.monzo.title" . }}'
      #       icon_emoji: '{{ template "slack.monzo.icon_emoji" . }}'
      #       color: '{{ template "slack.monzo.color" . }}'
      #       text: '{{ template "slack.monzo.text" . }}'
      #       actions:
      #         - type: button
      #           text: "Runbook :green_book:"
      #           url: "{{ (index .Alerts 0).Annotations.runbook_url }}"
      #         - type: button
      #           text: "Query :mag:"
      #           url: "{{ (index .Alerts 0).GeneratorURL }}"
      #         - type: button
      #           text: "Dashboard :grafana:"
      #           url: "{{ (index .Alerts 0).Annotations.dashboard }}"
      #         - type: button
      #           text: "Silence :no_bell:"
      #           url: '{{ template "__alert_silence_link" . }}'
      #         - type: button
      #           text: '{{ template "slack.monzo.link_button_text" . }}'
      #           url: "{{ .CommonAnnotations.link_url }}"
      # - name: slack-code-owners
      #   slack_configs:
      #     - channel: "#{{ .CommonLabels.code_owner_channel }}"
      #       send_resolved: true
      #       title: '{{ template "slack.monzo.title" . }}'
      #       icon_emoji: '{{ template "slack.monzo.icon_emoji" . }}'
      #       color: '{{ template "slack.monzo.color" . }}'
      #       text: '{{ template "slack.monzo.text" . }}'
      #       actions:
      #         - type: button
      #           text: "Runbook :green_book:"
      #           url: "{{ (index .Alerts 0).Annotations.runbook }}"
      #         - type: button
      #           text: "Query :mag:"
      #           url: "{{ (index .Alerts 0).GeneratorURL }}"
      #         - type: button
      #           text: "Dashboard :grafana:"
      #           url: "{{ (index .Alerts 0).Annotations.dashboard }}"
      #         - type: button
      #           text: "Silence :no_bell:"
      #           url: '{{ template "__alert_silence_link" . }}'
      #         - type: button
      #           text: '{{ template "slack.monzo.link_button_text" . }}'
      #           url: "{{ .CommonAnnotations.link_url }}"
      #

vmalert:
  enabled: true
  spec:
    resources:
      requests:
        cpu: 20m
        memory: 50Mi
      limits:
        memory: 50Mi
    configReloaderResources:
      requests:
        cpu: 10m
        memory: 10Mi
      limits:
        memory: 10Mi


vmagent:
  # -- Create VMAgent CR
  enabled: true
  spec:
    externalLabels:
      cluster: ${ENVIROMENT}
    extraArgs:
      promscrape.dropOriginalLabels: "false"
      promscrape.maxScrapeSize: "33554432"
    resources:
      requests:
        cpu: 90m
        memory: 384Mi
      limits:
        memory: 384Mi
    configReloaderResources:
      requests:
        cpu: 10m
        memory: 20Mi
      limits:
        memory: 20Mi

grafana:
  enabled: false

# -- prometheus-node-exporter dependency chart configuration. For possible values check [here](https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus-node-exporter/values.yaml)
prometheus-node-exporter:
  enabled: false
  vmScrape:
    enabled: true

kube-state-metrics:
  enabled: true
  resources:
    requests:
      cpu: 10m
      memory: 50Mi
    limits:
      memory: 50Mi

  vmScrape:
    enabled: true

kubelet:
  enabled: true

kubeApiServer:
  enabled: true

kubeControllerManager:
  enabled: true
  endpoints:
    - 10.0.64.1

  service:
    selector:
      k8s-app: kube-controller-manager
      tier: control-plane

  vmScrape:
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          # bearerTokenSecret:
          #   key: ""
          port: http-metrics
          scheme: https
          tlsConfig:
            caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            serverName: kubernetes
            insecureSkipVerify: true
# Component scraping etcd
kubeEtcd:
  enabled: true
  endpoints:
    - 10.0.64.1
  service:
    enabled: true
    port: 2381
    targetPort: 2381
  vmScrape:
    spec:
      endpoints:
        - port: http-metrics
          scheme: http

kubeScheduler:
  enabled: true
  endpoints:
    - 10.0.64.1
  service:
    selector:
      k8s-app: kube-scheduler
      tier: control-plane
  # -- Spec for VMServiceScrape CRD is [here](https://docs.victoriametrics.com/operator/api.html#vmservicescrapespec)
  vmScrape:
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          # bearerTokenSecret:
          #   key: ""
          port: http-metrics
          scheme: https
          tlsConfig:
            caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecureSkipVerify: true

kubeProxy:
  enabled: false
